driverName=cloudsql-postgresql
username=CLOUDSQL_POSTGRESQL_USERNAME
password=CLOUDSQL_POSTGRESQL_PASSWORD
connectionName=CLOUDSQL_POSTGRESQL_CONNECTION_NAME
databaseName=test_automation_db
schema=public
URL=jdbc:postgresql://google/%s?cloudSqlInstance=%s&socketFactory=com.google.cloud.sql.postgres.SocketFactory&user=%s&password=%s

datatypesColumns=( id varchar(100) primary key, col1 bpchar, col2 bpchar(10), col3 varchar, col4 varchar(3), \
  col5 bytea, col6 int2, col7 int4, col8 int8, col10 numeric(10, 4), col11 numeric(10), col12 float4, col13 float8, \
  col14 money, col15 text, col16 name, col17 float8, col18 numeric(38), col22 timestamp, col23 timestamptz, \
  col24 time, col25 interval, col26 interval, col27 date, col28 timetz, col29 point, col30 line, col31 lseg, \
  col32 box, col33 path, col34 polygon, col35 circle, col36 cidr, col37 inet, col38 macaddr, col39 macaddr8, \
  col40 bit(2), col41 varbit(5), col42 json, col43 jsonb, col44 _pg_lsn, col45 pg_snapshot, col46 tsquery, \
  col47 tsvector, col48 txid_snapshot, col49 uuid, col50 xml, col51 int4range, col52 int8range, col53 numrange, \
  col54 tsrange, col55 tstzrange, col56 daterange, col57 pg_lsn, col58 int4, col59 int2, col60 int8, col61 real, \
  col62 smallint, col63 serial, col64 smallserial, col65 double precision, col66 bigint, col67 bigserial, col68 boolean)
datatypesColumnsList=( id, col1, col2, col3, col4, col5, col6 , col7 , col8 , col10, col11, col12, col13, col14, \
  col15, col16, col17, col18, col22, col23, col24, col25, col26, col27, col28, col29, col30, col31, col32, col33, \
  col34, col35, col36, col37, col38, col39, col40, col41, col42, col43, col44, col45, col46, col47, col48, col49, \
  col50, col51, col52, col53, col54, col55, col56, col57, col58, col59, col60, col61, col62, col63, col64, col65,\
  col66, col67, col68 )
datatypesValues=VALUES ('User5', 'M', 'ABC...1234', 'B', 'ABC', decode('48656C6C6F20576F726C6421','hex'), 123, 123, \
  123456, 123.4567, 123456789, 123.456, 123.456, 100.26, 'Hello World!', 'User 5', 123.456, 100, \
  '2023-01-01 07:30:00.000', '2023-01-01 15:30:00.000', '02:00:00', '6 mons 02:30:00'::interval, \
  '6 mons 02:30:00'::interval, '2001-01-01', '02:00:00', '(21.0,32.0)'::point, '{2.0,3.0,4.0}'::line, \
  '[(2.0,3.0),(4.0,5.0)]'::lseg, '(4.0,5.0),(2.0,3.0)'::box, '((2.0,3.0),(4.0,5.0),(6.0,7.0))'::path, \
  '((2.0,3.0),(4.0,5.0),(6.0,1.0))'::polygon, '<(4.0,5.0),2.0>'::circle, '192.168.0.0/24'::cidr, \
  '192.168.0.1/24'::inet, '08:00:2b:01:02:03'::macaddr, '08:00:2b:01:02:03:04:05'::macaddr8, '00', '11100', \
  '{"bar": "baz", "balance": 7.77, "active": false}'::json, '{"bar": "baz", "active": false, "balance": 7.77}'::jsonb, \
  '{16/B374D848}', NULL, '''fat'' & ''rat'''::tsquery, \
  '''a'' ''and'' ''ate'' ''cat'' ''fat'' ''mat'' ''on'' ''rat'' ''sat'''::tsvector, NULL, \
  'a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11'::uuid, 'xml ''<foo>bar</foo>''', '[3,7)'::int4range, '[3,7)'::int8range, \
  '(1.0,14.0)'::numrange, '["2010-01-01 14:30:00","2010-01-01 15:30:00")'::tsrange, \
  '["2010-01-01 20:00:00+05:30","2010-01-01 21:00:00+05:30")'::tstzrange, '[1992-03-21,1994-06-26)'::daterange, \
  '16/B374D848'::pg_lsn, 2, 2, 2, '1234.5679', '600', DEFAULT, DEFAULT, '61.823765812', '2500000000000', \
  DEFAULT, false);
datatypesSchema=[{"key":"id","value":"string"},{"key":"col1","value":"string"},{"key":"col2","value":"string"},\
  {"key":"col3","value":"string"},{"key":"col4","value":"string"},{"key":"col5","value":"bytes"},\
  {"key":"col6","value":"int"},{"key":"col7","value":"int"},{"key":"col8","value":"long"},\
  {"key":"col10","value":"decimal"},{"key":"col11","value":"decimal"},{"key":"col12","value":"float"},\
  {"key":"col13","value":"double"},{"key":"col14","value":"string"},{"key":"col15","value":"string"},\
  {"key":"col16","value":"string"},{"key":"col17","value":"double"},{"key":"col18","value":"decimal"},\
  {"key":"col22","value":"timestamp"},{"key":"col23","value":"timestamp"},{"key":"col24","value":"time"},\
  {"key":"col25","value":"string"},{"key":"col26","value":"string"},{"key":"col27","value":"date"},\
  {"key":"col28","value":"string"},{"key":"col29","value":"string"},{"key":"col30","value":"string"},\
  {"key":"col31","value":"string"},{"key":"col32","value":"string"},{"key":"col33","value":"string"},\
  {"key":"col34","value":"string"},{"key":"col35","value":"string"},{"key":"col36","value":"string"},\
  {"key":"col37","value":"string"},{"key":"col38","value":"string"},{"key":"col39","value":"string"},\
  {"key":"col40","value":"string"},{"key":"col41","value":"string"},{"key":"col42","value":"string"},\
  {"key":"col43","value":"string"},{"key":"col44","value":"string"},{"key":"col45","value":"string"},\
  {"key":"col46","value":"string"},{"key":"col47","value":"string"},{"key":"col48","value":"string"},\
  {"key":"col49","value":"string"},{"key":"col50","value":"string"},{"key":"col51","value":"string"},\
  {"key":"col52","value":"string"},{"key":"col53","value":"string"},{"key":"col54","value":"string"},\
  {"key":"col55","value":"string"},{"key":"col56","value":"string"},{"key":"col57","value":"string"},\
  {"key":"col58","value":"int"},{"key":"col59","value":"int"},{"key":"col60","value":"long"}, \
  {"key":"col61","value":"float"},{"key":"col62","value":"int"},{"key":"col63","value":"int"},\
  {"key":"col64","value":"int"},{"key":"col65","value":"double"},{"key":"col66","value":"long"},\
  {"key":"col67","value":"long"},{"key":"col68","value":"boolean"}]

#CLOUDSQLPOSTGRESQL Invalid Properties
invalidRef=invalidRef&^*&&*
invalidDatabaseName=invalidDB
invalidImportQuery=select
invalidTableNameImportQuery=select * from abc;
invalidDriverName=abcdriver
invalidUserName=testUser
invalidPassword=testPassword
invalidBoundingQuery=SELECT MIN(id),MAX(id) FROM table
invalidBoundingQueryValue=select;
invalidTable=table
invalidConnectionName=abd3

#CLOUDSQLPOSTGRESQL Valid Properties
connectionArgumentsList=[{"key":"queryTimeout","value":"-1"}]
connectionTimeout=150
numberOfSplits=2
zeroValue=0
splitByColumn=ID
importQuery=where $CONDITIONS

#bq properties
projectId=cdf-athena
dataset=test_automation
bqOutputMultipleDatatypesSchema=[{"key":"col1","value":"bytes"},{"key":"col2","value":"string"},\
  {"key":"col3","value":"date"},{"key":"col4","value":"double"},{"key":"col5","value":"decimal"},\
  {"key":"col6","value":"timestamp"},{"key":"col7","value":"decimal"},{"key":"col8","value":"boolean"},\
  {"key":"col9","value":"long"},{"key":"col10","value":"time"}]

#bq macro properties
bqTruncateTable=true
bqUpdateTableSchema=true

#bq queries file path
CreateBQTableQueryFile=testdata/BigQuery/BigQueryCreateTableQuery.txt
InsertBQDataQueryFile=testdata/BigQuery/BigQueryInsertDataQuery.txt

#BIGQUERY Datatypes
bigQueryDatatypesColumns=(col1 bytea, col2 varchar(100), col3 date, col4 double precision, col5 numeric(5, 2), \
  col6 timestamp, col7 numeric(5, 2), col8 boolean, col9 int8, col10 time)
bigQueryDatatypesColumnsList=(col1,col2,col3,col4,col5,col6,col7,col8,col9,col10)
